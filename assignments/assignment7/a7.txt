#Name: Jason Tran
#NSID: jat687
#Student Number: 11101081
#Course: CMPT 145-01
#Lab: L03


Question 1

Q1. f(n) = O(2^n)
Q2. f(n) = O(n^4)
Q3. f(n) = O(n!)
Q4. f(n) = O(n^3log(n))
Q5. f(n) = O(n^4.123)


Question 2

Q1. f(n) = O(n)
Q2. f(n) = O(n^2)
Q3. f(n) = O(nm)
Q4. f(n) = O(nm!)


Question 3

(a) O(n^2) because the first loop executes n times, and the while loop executes n more times. Therefore n * n = n^2
(b) O(n^2) because the while j < i loop runs 1 + 2 + 3 + ... + n = (n(n+1))/2 times. The largest n in that equation is n^2.
(c) O(nlogn) because the while j loop increments by j * 2 so that loop is log(n). That loop gets run n times because of the for loop. Therefore log(n) * n = nlogn


Question 4.

Best case: O(1) if the cases' status is closed, simply append it to closed_cases and return.
Worst case: O(nm). If n = size of case["keyword"] and m = size of closed_cases. Then if case["status"] is not "Closed" the inner loop runs m times for a run time of O(m). This inner loop is ran n times. Therefore n * O(m) = O(nm).

JUSTICE-ification: This statement is ONLY correct in the best case scenario! When we are discussing big O notation, it is understood to represent the worst case scenario. Therefore he is WRONG!
