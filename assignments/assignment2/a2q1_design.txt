#Name: Jason Tran
#NSID: jat687
#Student Number: 11101081
#Course: CMPT 145-01
#Lab: L03



### Main Program ###

	- Runs on the UNIX command line and accepts two command-line arguments: the name of a text document contain 15 rows of 15 characters, and the word/string to search for
	- Opens and reads the text document
	- The 15 rows of 15 characters are turned into a list of lists where each element in the list is a character
	- Determines whether the desired word is orthogonally present in the given word square
	- This is done by turning each row into a string and checking if the word is present. Then turning each column into a string and checking if the word is present.
	- The word is also reversed and checked in each row and column string.
	- Reports "Gentleman GoGo IS GUILTY of <word_to_look_for>" or "word_to_look_for> was NOT found"

	

### Main Functions ###

1. get_confession(fileName)
	Purpose: 
		Takes in the name of the file, opens the file, reads each line, creates a list of lists of characters
	Pre-Condition: 
		:param fileName: string that is the name of the file. File name should end in .txt
	Post-Condition: 
		None
	Return: 
		A list of lists where each element is a character from the document that was opened

	** Test Cases:
        	inputs: ['confession.txt', confession1], #confession1 is a list of list that is created in the test file
        	outputs: ['M', 'B', 'R'],
        	reason: 'Testing I/O by checking that list output matches expected letters'



2. find_word(confession, word)
	Purpose: find if the desired word is found orthogonally in the list of characters
	Pre-condition:
        	:param confession: a list of lists where each element is a character
        	:param word: a string in capital letters that is to be searched for in param confession
	Post-condition: None.
	Return: 
		True if the crime string appears orthogonally in the confessions input of characters
		False if the crime string does not appear orthogonally in the 

	** Test cases:
		input: "OPVF", "LADAAX"
		output: True
		reason: 'Testing strings that appear horizontally going forward (right) - All True'

		input: 'GUJY', 'HBEKH'
		output: True
		reason: 'Testing strings that appear horizontally going backward - All True'

		input: 'EYOG', 'DCUJJW'
		output: True
		reason: "Testing strings that appear vertically going backward (up) - All True"

		input: 'MXSDH', 'RZIZUGP'
		output: True
		reason: "Testing strings that appear vertically going forward (down) - All True"

		input: 'HANDKERCHIEF', 'ABNEGATION'
		output: False
		reason: "Strings that do not appear in the confession - All False"

	

3. print_is_guilty(verdict, word)
	Purpose: 
		prints the statement that ""Gentleman GoGo IS GUILTY of <word_to_look_for>" or "word_to_look_for> was NOT found"
	Pre-Condition: 
		:param result: A boolean that represents whether the word was found or not
		:param crime: a string in capital letters representing the word that was being searched
	Post-condition:
		None
	Return:
		None
	
	** Test by visually expecting that output matches expected output




	
